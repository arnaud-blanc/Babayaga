import streamlit as st

st.set_page_config(
    page_title="babayaga",
    page_icon="Images/favicon.ico",
    layout="centered",
)

with open("style.css") as style:
    st.markdown(f"<style>{style.read()}</style>", unsafe_allow_html=True)

st.title("Baba Yaga üßô‚Äç‚ôÄÔ∏è –ë–∞–±–∞ –Ø–≥–∞")

st.write(
    """***Baba Yaga*** signifie ¬´ Sorci√®re ¬ª en russe.
         
L'id√©e m'est venue de tester Streamlit en cr√©ant une minuscule application de translitt√©ration.
En plus de me former au sciences des donn√©es, je suis chanteur lyrique et je commence √† üé∂ chanter le r√©pertoire russe üé∂.

L'application transforme les caract√®res *cyrilliques* en caract√®res *latins*.

Essayez en copiant-collant la cellule suivante ! ‚§µÔ∏è"""
)

st.code(
    """–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ –µ—â–µ —Ä—É–¥–∏–º–µ–Ω—Ç–∞—Ä–Ω–æ! 
–ü—Ä–∏—á–∏–Ω–∞ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è - –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ.
–Ø –±—ã—Å—Ç—Ä–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–ª –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ Streamlit üöÄ.
–û–Ω –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –º–æ–∏–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–æ–∏–º –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–∏–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP).
–Ø —Ç–∞–∫–∂–µ –ø–æ–π–¥—É –¥–∞–ª—å—à–µ, –Ω–∞—É—á–∏–≤—à–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FastApi –∏ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üòâ.
–£ –º–µ–Ω—è –º–Ω–æ–≥–æ –∏–¥–µ–π...

–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é www.DeepL.com/Translator (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
)

st.markdown("[üìö    traduction  ‚ÅâÔ∏è](https://link.infini.fr/translation_for_the_curious)")

with st.form("my_form", clear_on_submit=True):
    txt = st.text_area(
        "Texte russe √† translitt√©rer :",
        placeholder="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –º–∏—Ä!",
        key="russian_text",
    )

    # Every form must have a submit button.
    submitted = st.form_submit_button(
        "ü™Ñ", help="translitt√©rer / effacer la translitt√©ration"
    )

genre = st.radio(
    "Type de translitt√©ration :", ("ISO 9", "sans diacritiques"), horizontal=True
)


def translitteration(text: str, genre: str) -> str:
    """Transliterates Russian text with Latin characters

    Args:
        text (str): text on which transliteration is applied
        genre (str): type of transliteration

    Returns:
        str: transliterated text
    """
    cyrillic_alphabet = (
        "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ã—é—è—ä—å—ç–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–´–Æ–Ø–™–¨–≠"
    )
    # ISO 9 version :
    latin_translitteration = (
        "abvgde√´≈æzijklmnoprstufhcƒç≈°≈ùy√ª√¢ ∫ π√®ABVGDE√ã≈ΩZIJKLMNOPRSTUFHCƒå≈†≈úY√õ√Ç ∫ π√à"
    )
    # lowercase version whitout diacritics :
    simple_lower = "a b v g d i√© io j z i √Ø k l m n o p r s t ou f kh ts tch ch chtch y iou ia  ∫  π √®".split(
        " "
    )
    # Capitalized version whitout diacritics :
    simple_capitalized = list(map(lambda phoneme: phoneme.capitalize(), simple_lower))

    simple_latin = simple_lower + simple_capitalized

    # transliteration dictionnary :
    trans_dic = {
        key: {"ISO 9": value1, "sans diacritiques": value2}
        for key, value1, value2 in zip(
            cyrillic_alphabet, latin_translitteration, simple_latin
        )
    }

    # replace cyrillic characters:
    for character in text:
        if character in trans_dic:
            text = text.replace(character, trans_dic[character][genre])

    return text


texte_latin = translitteration(txt, genre)

if txt:
    st.download_button(
        "T√©l√©charger :",
        texte_latin,
        help="La translitt√©ration sera t√©l√©charg√©e au format texte.",
    )
    st.code(texte_latin, language=None)
